{
  "openapi": "3.0.0",
  "info": {
    "title": "Greeka Todo API",
    "version": "1.0.0",
    "description": "A Next.js API server for managing todo tasks with PostgreSQL database"
  },
  "servers": [
    {
      "url": "https://greeka-todo-server-kty8fk2pv-ictrls-projects-0e368638.vercel.app/api",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000/api",
      "description": "Development server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "tags": ["Health"],
        "responses": {
          "200": {
            "description": "Health check successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "database": {
                      "type": "string",
                      "example": "connected"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Health check failed"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "summary": "Get all tasks with pagination and filtering",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of tasks per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["PENDING", "DONE", "IN_PROGRESS", "PAUSED"]
            },
            "description": "Filter by task status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": ["RED", "YELLOW", "BLUE"]
            },
            "description": "Filter by task priority"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search tasks by name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "summary": "Create a new task",
        "tags": ["Tasks"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task created successfully"
                    },
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "summary": "Get a single task by ID",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Task details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "summary": "Update a task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task updated successfully"
                    },
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "summary": "Delete a task (soft delete)",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Task ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Task deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Task deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/tasks/export": {
      "get": {
        "summary": "Export tasks in JSON format",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["PENDING", "DONE", "IN_PROGRESS", "PAUSED"]
            },
            "description": "Filter by task status"
          },
          {
            "in": "query",
            "name": "priority",
            "schema": {
              "type": "string",
              "enum": ["RED", "YELLOW", "BLUE"]
            },
            "description": "Filter by task priority"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks exported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Task"
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Task": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "example": 1 },
          "name": { "type": "string", "example": "Hire Saurav Kumar" },
          "due_date": { "type": "string", "format": "date", "example": "2025-07-25" },
          "status": { 
            "type": "string", 
            "enum": ["PENDING", "DONE", "IN_PROGRESS", "PAUSED"],
            "example": "PENDING"
          },
          "priority": { 
            "type": "string", 
            "enum": ["RED", "YELLOW", "BLUE"],
            "example": "RED"
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" },
          "is_active": { "type": "boolean", "example": true }
        }
      },
      "TaskCreate": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": { "type": "string", "example": "Hire Saurav Kumar" },
          "due_date": { "type": "string", "format": "date", "example": "2025-07-25" },
          "status": { 
            "type": "string", 
            "enum": ["PENDING", "DONE", "IN_PROGRESS", "PAUSED"],
            "default": "PENDING"
          },
          "priority": { 
            "type": "string", 
            "enum": ["RED", "YELLOW", "BLUE"],
            "default": "BLUE"
          }
        }
      },
      "TaskUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Hire Saurav Kumar" },
          "due_date": { "type": "string", "format": "date", "example": "2025-07-25" },
          "status": { 
            "type": "string", 
            "enum": ["PENDING", "DONE", "IN_PROGRESS", "PAUSED"]
          },
          "priority": { 
            "type": "string", 
            "enum": ["RED", "YELLOW", "BLUE"]
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "page": { "type": "integer", "example": 1 },
          "limit": { "type": "integer", "example": 10 },
          "totalTasks": { "type": "integer", "example": 25 },
          "totalPages": { "type": "integer", "example": 3 },
          "hasNext": { "type": "boolean", "example": true },
          "hasPrev": { "type": "boolean", "example": false }
        }
      }
    }
  }
} 